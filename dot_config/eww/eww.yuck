(defwindow bar
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore true
  :geometry (geometry
    :width "100%"
    :height "40px"
  )
(centerbox
    :class "barMainCenterBox"
  (left_center_box)
  (center_center_box)
  (right_center_box)
  )
)

(defwidget left_center_box []
(box
    :space-evenly false
    :spacing 7
    :halign "start"
  (i3_workspaces_widget)
  )
)

(defwidget center_center_box []
(box
    :space-evenly false
    :spacing 7
    :halign "center"
  (datetime_widget)
  )
)

(defwidget right_center_box []
(box
    :space-evenly false
    :spacing 7
    :halign "end"
  (cpu_widget)
  (bar_separator)
  (disk_widget :mount_point "/")
  (bar_separator)
  (volume_widget)
  )
)

(defwidget volume_widget []
(eventbox
    :onhover  "eww update reveal_volume_scale=true"
    :onhoverlost  "eww update reveal_volume_scale=false"
  (box
      :space-evenly false
    (label
        :text {volume_poll >= 66 ? "󰕾" : volume_poll >= 33 ? "󰖀" : "󰕿"}
        :class "volumeIcon ${volume_poll >= 66 ? "high" : volume_poll >= 33 ? "medium" : "low"}"
      ) ;; volume icon
    (revealer
        :transition "slideleft"
        :reveal reveal_volume_scale
        :duration "500ms"
      (box
          :space-evenly false
        (label
            :text volume_poll
            :style "margin-left: 7px"
          ) ;; volume text
        (scale
            :value volume_poll
            :min 0
            :max 101
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
            :width 200
            :class "volumeScale ${volume_poll >= 66 ? "high" : volume_poll >= 33 ? "medium" : "low"}"
          )
        )
      )
    )
  )
)

(defwidget i3_workspaces_widget []
(eventbox
    :onscroll "i3-msg -t command workspace $(test {} == 'up' && echo 'prev' || echo 'next') 1>/dev/null"
  (box
    (for ws in i3_workspaces_poll
      (eventbox
          :onclick "i3-msg -t command workspace number ${ws['num']} 1>/dev/null"
          :class "workspace ${ws['focused']}"
        (label :text "${ws['name']}")
        )
      )
    )
  )
)

(defwidget datetime_widget []
(box
    :space-evenly false
    :spacing 7
  (label :text {formattime(EWW_TIME, "%H:%M")})
  (bar_separator)
  (label :text {formattime(EWW_TIME, "%b %-d")})
  )
)

(defwidget disk_widget [mount_point]
(box
    :space-evenly false
    :spacing 7
    :tooltip "PART ${mount_point}: ${replace(EWW_DISK[mount_point]["used_perc"], "\\..*", "")}% used"
  (label :text "󰋊")
  (circular-progress
      :start-at 75
      :width 14
      :thickness 3.5
      :value {replace(EWW_DISK[mount_point]["used_perc"], "\\..*", "")}
      :class "barCircularProgress"
    )
  )
)

(defwidget cpu_widget []
(box
    :space-evenly false
    :spacing 7
    :tooltip "CPU: ${replace(EWW_CPU["avg"], "\\..*", "")}% used"
  (label :text "")
  (circular-progress
      :start-at 75
      :width 14
      :thickness 3.5
      :value {replace(EWW_CPU["avg"], "\\..*", "")}
      :class "barCircularProgress"
    )
  )
)

(defwidget bar_separator []
(box :class "barSeparator")
)

(defvar reveal_volume_scale false)

(defpoll volume_poll
  :interval "100ms"
  :initial 0
  "pactl get-sink-volume @DEFAULT_SINK@ | awk 'NR==1 {print $5}' | awk -F% '{print $1}'"
)

(defpoll i3_workspaces_poll
  :interval "100ms"
  :initial "[]"
  "i3-msg -t get_workspaces"
)
